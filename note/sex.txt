컴포넌트(Component) : React 애플리케이션에서 UI를 구성하는 독립적이고 재사용 가능한 코드 단위
                    각 컴포넌트는 UI의 일부를 담당하며, 상태(state)와 속성(props)를 이용해 동작

**단일 책임 원칙(Single Responsibility Principle)**
하나의 컴포넌트는 특정한 역할이나 UI 조각을 담당하고, 다른 컴포넌트와 결합하여 전체 UI를 구성

1. 함수형 컴포넌트(Functional Component)

- React 16.8 이후, 상태를 관리할 수 있는 훅(Hooks) 기능이 추가되면서 함수형 컴포넌트가 주로 사용됨
- 함수형 컴포넌트는 JavaScript 함수로 작성되며, props를 인자로 받고 JSX를 반환

function Hello(props) {
    return <h1>Hello, {props.name}</h1>;
}

2.클래스형 컴포넌트(Class Component)

- React의 초기 버전
- 최신 React에서는 함수형 컴포넌트와 훅을 선호

컴포넌트의 특징

- JSX : React 컴포넌트는 JavaScript XML(JXS)을 사용하여 UI를 정의한다. JSX는 JavaScript와 HTML을
        결합한 문법으로, UI 구조적으로 표현할 수 있다.
- Props(속성) : 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달할 때 사용. props는 읽기 전용으로,
                자식 컴포넌트는 props 값을 변경할 수 없다.

State(상태) : 컴포넌트 내부에서 동적인 데이터를 관리할 때 사용됨. 상태는 컴포넌트 내에서 변경이 가능하며,
                상태가 변경되면 컴포넌트가 다시 렌더링됨.
                
Hook(훅)
- React에서 함수형 컴포넌트가 상태와 사이드 이펙트(Effect) 등을 관리할 수 있게 해주는 기능.
훅을 사용하면 함수형 컴포넌트에서도 클래스형 컴포넌트의 기능을 대체할 수 있게 됨.
컴포넌트 내부에서 사용되며 컴포넌트가 렌더링될 때마다 새로운 상태나 값을 반환할 수 있다.

1. useState : 상태를 관리하는 훅
2. useEffect : 컴포넌트가 렌더링될 때마다 특정 작업을 수행하는 훅
3. useContext : Context API와 함께 사용하여 상위 컴포넌트에서 하위 컴포넌트로 데이터를 전달하는 훅
4. useReducer: useState보다 더 복잡한 상태를 관리할 때 사용.
5. useMemo : 값이 변경될 때만 계산하는 값을 반환하는 훅
6. useCallback : 함수를 메모리제이션하여 불필요한 리렌더링을 방지하는 훅

useState
- 상태를 함수형 컴포넌트 내에서 관리할 수 있게 해주는 React 훅입니다. useState는 컴포넌트 내에서
변경 가능한 값을 관리하고, 이 값을 변경할 수 있는 함수를 반환

동기 함수
- 함수가 끝날 때까지 다음 코드가 실행되지 않고 기다립니다.

비동기 함수(Asynchronous Function)
- async와 await를 사용하여, 시간이 걸리는 작업이 완료되기를 기다리면서 다른 작업을
동시에 할 수 있게 해줍니다.

엔드포인트
- 웹 서버와 통신하기 위한 URL 주소, 클라이언트(브라우저, 앱)가 특정한 리소스에 접근하기 위해 요청을
보내는 주소입니다. 엔드포인트는 보통 HTTP 메서드(GET, POST, PUT, DELETE)와 결합되어, 클라이언트와
서버 간의 데이터 교환 지점이 됩니다.

Context
- React에서 전역 상태를 관리하고 이를 애플리케이션의 여러 컴포넌트에서 쉽게 공유할 수 있게 해주는 기능
